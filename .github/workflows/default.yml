name: default

env:
  EARL_DOTNET_VERSION: 6.0.201
  DOTNET_NOLOGO: true

on:   
  push:
    branches: [ develop, main, 'feature/**' ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
    
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.EARL_DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore --force

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

  test:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
    
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.EARL_DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore --force

      - name: Run tests
        run: |
          dotnet test --results-directory TestResults --logger "trx;LogFileName=earl-test-results.trx" --collect:"XPlat Code Coverage" /p:WarningLevel=0 -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.DeterministicReport=true

      - name: Upload artifact 'earl-test-results'
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
            name: earl-test-results
            path: TestResults
      
      - name: Report test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: test results
          path: TestResults/earl-test-results.trx
          reporter: dotnet-trx

      - name: Generate coverage results
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.2
        with:
          reports: TestResults/**/coverage.cobertura.xml
          reporttypes: 'Cobertura;MarkdownSummary'
          targetdir: CoverageResults
          title: coverage results

      - name: Upload artifact 'earl-coverage-results'
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: earl-coverage-results
          path: CoverageResults

      - name: Report coverage results
        uses: cryptoc1/cobertura-action@master
        if: success() || failure()
        with: 
          fail_below_threshold: false
          link_missing_lines: true
          minimum_coverage: 80
          path: CoverageResults/Cobertura.xml 
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          report_name: coverage results
          show_branch: false
          show_class_names: true
          show_missing: true
          skip_covered: false

      - name: Publish coverage results
        if: success() || failure()
        uses: codecov/codecov-action@v2

  pack:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
    
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.EARL_DOTNET_VERSION }}
        
      - name: Restore dependencies
        run: dotnet restore --force

      - name: Create packages
        run: dotnet pack --configuration Release --output dist /p:WarningLevel=0

      - name: Upload artifact 'earl-packages'
        uses: actions/upload-artifact@v3
        with:
            name: earl-packages
            path: dist

  publish:
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/develop')
    needs: [ pack ]

    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.EARL_DOTNET_VERSION }}

      - name: Download artifact 'earl-packages'
        uses: actions/download-artifact@v3
        with:
          name: earl-packages
      
      - name: Push packages
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  benchmark:
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/develop')
    needs: [ build ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core
        run: |
          Invoke-WebRequest -Uri "https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1" -OutFile "dotnet-install.ps1"

          # Install 32bit SDK
          ./dotnet-install -InstallDir "C:\Program Files (x86)\dotnet" -Architecture x86 -Version ${{ env.EARL_DOTNET_VERSION }}

          # Install 64bit SDK
          ./dotnet-install -InstallDir "C:\Program Files\dotnet" -Architecture x64 -Version ${{ env.EARL_DOTNET_VERSION }}

        shell: pwsh
        
      - name: Run benchmarks
        run: . "C:\Program Files\dotnet\dotnet.exe" run --project .\src\Crawler\test\Benchmarks\Earl.Crawler.Benchmarks.csproj -c Release /p:WarningLevel=0 -- --filter *
        shell: pwsh
  
      - name: Upload artifact 'earl-benchmarks'
        uses: actions/upload-artifact@v3
        with:
          name: earl-benchmarks
          path: BenchmarkDotNet.Artifacts

      - name: Download cache 'earl-benchmarks'
        uses: actions/cache@v2
        with:
          key: earl-benchmarks
          path: ./cache

      - name: Report benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          alert-comment-cc-users: '@Cryptoc1'
          alert-threshold: '125%'
          auto-push: false
          comment-on-alert: true
          comment-always: true
          external-data-json-path: ./cache/benchmark-data.json
          fail-threshold: '200%'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: Earl Benchmarks
          output-file-path: BenchmarkDotNet.Artifacts/results/Earl.Crawler.Benchmarks.CrawlerBenchmarks-report-full-compressed.json
          tool: benchmarkdotnet